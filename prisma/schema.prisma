// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id          String       @id @default(uuid())
  senha       String       @map("hashed_password")
  email       String       @unique()
  nomeUsuario String       @unique
  isAdmin     Boolean      @default(false)
  criadoEm    DateTime     @default(now())
  favoritos   Favorito[]
  avaliacoes  Avaliacao[]
  comentarios Comentario[]
}

model Manga {
  id           String   @id @default(uuid())
  titulo       String
  descricao    String
  imagem       String?
  criadoEm     DateTime @default(now())
  atualizadoEM DateTime @default(now()) @updatedAt

  favoritos  Favorito[]
  avaliacoes Avaliacao[]
  categorias CategoriaManga[]
  Comentario Comentario[]
}

model Categoria {
  id           String   @id @default(uuid())
  descricao    String
  criadoEm     DateTime @default(now())
  atualizadoEM DateTime @default(now()) @updatedAt

  CategoriaManga CategoriaManga[]
}

model CategoriaManga {
  idCategoria  String
  idManga      String
  criadoEm     DateTime @default(now())
  atualizadoEM DateTime @default(now()) @updatedAt

  categoria Categoria @relation(fields: [idCategoria], references: [id])
  manga     Manga     @relation(fields: [idManga], references: [id])

  @@id([idCategoria, idManga])
}

model Favorito {
  idUsuario    String   @map("user_id")
  idManga      String   @map("manga_id")
  criadoEm     DateTime @default(now())
  atualizadoEM DateTime @default(now()) @updatedAt

  usuario Usuario @relation(fields: [idUsuario], references: [id], onDelete: Cascade) // Define a relação com Usuario
  manga   Manga   @relation(fields: [idManga], references: [id], onDelete: Cascade) // Define a relação com Manga

  @@id([idUsuario, idManga])
  @@map("favoritos")
}

model Avaliacao {
  id            String   @id @default(uuid())
  idUsuario     String
  idManga       String
  classificacao Int
  criadoEm      DateTime @default(now())
  atualizadoEM  DateTime @default(now()) @updatedAt

  usuario Usuario @relation(fields: [idUsuario], references: [id])
  manga   Manga   @relation(fields: [idManga], references: [id])
}

model Comentario {
  id           String   @id @default(uuid())
  idUsuario    String
  idManga      String
  comentario   String
  criadoEm     DateTime @default(now())
  atualizadoEM DateTime @default(now()) @updatedAt

  usuario Usuario @relation(fields: [idUsuario], references: [id])
  manga   Manga   @relation(fields: [idManga], references: [id])
}
